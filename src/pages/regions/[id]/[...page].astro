---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import * as R from 'remeda';

import { MAP_DIVISION_DATA_PATH } from '#constants.ts';
import RegionEntry from '#layouts/region-entry.astro';
import { getLocationsByIdsFunction } from '#lib/collections/locations/utils.ts';
import { getPostsByIdsFunction } from '#lib/collections/posts/utils.ts';
import { getRegionsCollection } from '#lib/collections/regions/data.ts';
import { getRegionsOptions } from '#lib/collections/regions/options.ts';
import { getRegionAncestorsFunction } from '#lib/collections/regions/utils.ts';
import { LanguageCodeEnum } from '#lib/i18n/i18n-types.ts';
import { getMapData } from '#lib/map/map-data.ts';
import { getLocationsFeatureCollection } from '#lib/map/map-locations.ts';
import { getContentMetadataFunction } from '#lib/metadata/metadata-items.ts';
import { filterHasFeaturedImage, sortContentMetadataByDate } from '#lib/metadata/metadata-utils.ts';
import { getFilterEntryQualityFunction } from '#lib/utils/collections.ts';
import { getBaseUrl } from '#lib/utils/routing.ts';
import { getMapApiBaseUrl } from '#lib/utils/routing.ts';

export const getStaticPaths = (async ({ paginate }) => {
	const { regions } = await getRegionsCollection();

	const getRegionAncestors = await getRegionAncestorsFunction();
	const getPostsByIds = await getPostsByIdsFunction();
	const getLocationsByIds = await getLocationsByIdsFunction();
	const getContentMetadata = await getContentMetadataFunction();

	const results = [];

	for (const entry of regions) {
		const ancestors = getRegionAncestors(entry);

		// Note: this is temporary code to limit map display specified regions
		const displayRegionIds = new Set(['taiwan', 'thailand']);
		const chineseRegionIds = new Set(['china', 'hong-kong', 'taiwan']);

		const showRegionMap =
			displayRegionIds.has(entry.id) ||
			ancestors.some((ancestor) => displayRegionIds.has(ancestor.id));

		const showChineseInterface =
			chineseRegionIds.has(entry.id) ||
			ancestors.some((ancestor) => chineseRegionIds.has(ancestor.id));

		const entryLocations = entry.data.locations ? getLocationsByIds(entry.data.locations) : [];

		const metadataItems = R.pipe(
			[
				...R.pipe(entryLocations, R.filter(getFilterEntryQualityFunction(2)), getContentMetadata),
				...R.pipe(entry.data.posts ?? [], getPostsByIds, getContentMetadata),
			],
			R.filter(filterHasFeaturedImage),
			R.sort(sortContentMetadataByDate)
		);

		const regionsOption = R.pipe(
			entry,
			(entry) => getRegionAncestors(entry).length, // Depth
			getRegionsOptions
		);

		const mapData = getMapData({
			featureCollection: showRegionMap ? getLocationsFeatureCollection(entryLocations) : undefined,
			mapApiBaseUrl: getMapApiBaseUrl(entry.collection, entry.id),
			...(showChineseInterface
				? { languages: [LanguageCodeEnum.English, LanguageCodeEnum.ChineseMandarin] }
				: {}),
			...(entry.data.hasDivision
				? { apiDivisionUrl: getBaseUrl(MAP_DIVISION_DATA_PATH, `${entry.id}.fgb`) }
				: {}),
		});

		results.push(
			...paginate(metadataItems, {
				params: { id: entry.id },
				props: {
					entry,
					mapData,
					regionsOption,
				},
				pageSize: 20,
			})
		);
	}
	return results;
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
---

<RegionEntry {...Astro.props} />
