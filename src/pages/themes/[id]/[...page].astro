---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import * as R from 'remeda';

import ThemeEntry from '#layouts/theme-entry.astro';
import { getLocationsCollection } from '#lib/collections/locations/data.ts';
import { getFirstRegionByReferenceFunction } from '#lib/collections/regions/utils.ts';
import { getThemesCollection } from '#lib/collections/themes/data.ts';
import { getPostsByThemeFunction } from '#lib/collections/themes/utils.ts';
import { LanguageCodeEnum } from '#lib/i18n/i18n-types.ts';
import { getMapData } from '#lib/map/map-data.ts';
import { getLocationsFeatureCollection } from '#lib/map/map-locations.ts';
import { getContentMetadataFunction } from '#lib/metadata/metadata-items.ts';
import { filterHasFeaturedImage, sortContentMetadataByDate } from '#lib/metadata/metadata-utils.ts';
import { getFilterEntryQualityFunction } from '#lib/utils/collections.ts';
import { getMapApiBaseUrl } from '#lib/utils/routing.ts';

export const getStaticPaths = (async ({ paginate }) => {
	const { locations } = await getLocationsCollection();
	const { themes } = await getThemesCollection();

	const getPostsByTerm = await getPostsByThemeFunction();
	const getContentMetadata = await getContentMetadataFunction();
	const getFirstRegionByReference = await getFirstRegionByReferenceFunction();

	const results = [];

	for (const entry of themes) {
		const regionPrimary = getFirstRegionByReference(entry.data.regions);

		// Note: the need to get location data async means we should filter this first!
		const locationsFiltered = locations.filter(
			({ data }) => data.themes?.some(({ id }) => id === entry.id) ?? false
		);

		const metadataItems = R.pipe(
			[
				...R.pipe(
					locationsFiltered,
					R.filter(getFilterEntryQualityFunction(2)), // Quality filter last!
					getContentMetadata
				),
				...R.pipe(entry, getPostsByTerm, getContentMetadata),
			],
			R.filter(filterHasFeaturedImage),
			R.sort(sortContentMetadataByDate)
		);

		const mapData = getMapData({
			featureCollection: getLocationsFeatureCollection(locationsFiltered),
			mapApiBaseUrl: getMapApiBaseUrl(entry.collection, entry.id),
			...(regionPrimary?.data.langCode?.startsWith('zh')
				? { languages: [LanguageCodeEnum.English, LanguageCodeEnum.ChineseTraditional] }
				: {}),
		});

		results.push(
			...paginate(metadataItems, {
				params: { id: entry.id },
				props: { entry, mapData },
				pageSize: 20,
			})
		);
	}
	return results;
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
---

<ThemeEntry {...Astro.props} />
