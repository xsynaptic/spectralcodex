---
import type { CollectionEntry } from 'astro:content';

import ContentSection from '#components/content/content-section.astro';
import ListColumnItem from '#components/list/list-column-item.astro';
import ListColumn from '#components/list/list-column.astro';
import Multilingual from '#components/parts/multilingual.astro';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getMultilingualContent } from '#lib/i18n/i18n-utils.ts';

interface Props {
	entry: CollectionEntry<'locations' | 'posts' | 'regions' | 'themes'>;
}

const { entry, ...props } = Astro.props;

const sources =
	'sources' in entry.data && entry.data.sources && entry.data.sources.length > 0
		? entry.data.sources
		: undefined;

const t = getTranslations();
---

{
	sources ? (
		<ContentSection data-pagefind-ignore {...props}>
			<Fragment slot="section-title">{t('content.section.sources')}</Fragment>
			<ListColumn class="font-serif text-xs sm:text-sm">
				{sources.map((source) => {
					if (!source) return;

					const titleMultilingual = getMultilingualContent(source, 'title');

					// TODO: fully multilingual output for this section
					return (
						<ListColumnItem>
							<span class="italic">{source.title}</span>
							{titleMultilingual ? (
								<Multilingual content={titleMultilingual} parenthesis={true} />
							) : undefined}
							{'publisher' in source && source.publisher ? (
								<span>{source.publisher}</span>
							) : undefined}
							{'datePublished' in source && source.datePublished ? (
								<span>({source.datePublished})</span>
							) : undefined}
						</ListColumnItem>
					);
				})}
			</ListColumn>
		</ContentSection>
	) : undefined
}
