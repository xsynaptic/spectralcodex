---
import type { CollectionEntry } from 'astro:content';

import { transformMarkdown } from '@spectralcodex/unified-tools';
import { render } from 'astro:content';

import type { RegionLanguage } from '#lib/collections/regions/types.ts';

import ContentSection from '#components/content/content-section.astro';
import ProseBody from '#components/parts/prose-body.astro';
import ProseDescription from '#components/parts/prose-description.astro';
import { getFirstRegionByReferenceFunction } from '#lib/collections/regions/utils.ts';
import { getHasContent } from '#lib/utils/astro.ts';

interface Props {
	entry: CollectionEntry<'locations' | 'regions' | 'series' | 'themes'>;
}

const { entry } = Astro.props;

const getFirstRegionByReference = await getFirstRegionByReferenceFunction();

let langCode: RegionLanguage | undefined;

if (entry.collection === 'regions') {
	langCode = entry.data.langCode;
} else if (entry.collection === 'locations') {
	langCode = getFirstRegionByReference(entry.data.override?.regions ?? entry.data.regions)?.data
		.langCode;
} else {
	langCode = getFirstRegionByReference(entry.data.regions)?.data.langCode;
}

const wrapCjkOptions = langCode ? { langCode: langCode.startsWith('zh') ? 'zh' : langCode } : {};

const hasContent = getHasContent(entry);

const { Content } = await render(entry);
---

{
	hasContent ? (
		<ProseBody class="pb-medium" data-pagefind-weight="2">
			<Content />
		</ProseBody>
	) : undefined
}{
	!hasContent && entry.data.description ? (
		<ContentSection>
			<Fragment slot="section-description">
				<ProseDescription data-pagefind-weight="2">
					<Fragment
						set:html={transformMarkdown({ input: entry.data.description, wrapCjkOptions })}
					/>
				</ProseDescription>
			</Fragment>
		</ContentSection>
	) : undefined
}
