---
import { Image } from 'astro:assets';

import type { ImageLayoutOption } from '@/lib/image/image-layout';
import type { LocalImageProps } from 'astro:assets';

import { FEATURE_IMAGE_PAGES } from '@/constants';
import { IMAGE_FORMAT, IMAGE_QUALITY } from '@/constants';
import { getImageById } from '@/lib/collections/images/utils';
import { getImageLayoutProps } from '@/lib/image/image-layout';
import { getImagePlaceholderProps } from '@/lib/image/image-placeholder';
import { getSiteUrl } from '@/lib/utils/routing';
import { sanitizeAltAttribute, sanitizeCaption } from '@/lib/utils/text';

interface Props {
	imageId: string;
	alt?: string;
	layout?: ImageLayoutOption;
}

const { imageId, alt: altProp, layout } = Astro.props;

const image = await getImageById(imageId);

const { src: imageMetadata, placeholder } = image.data;

// This controls how the component is rendered; RSS requires a less complex output
const { isRss } = Astro.locals;

const slotContents = (await Astro.slots.render('default')) as string | undefined;

const imageLinkUrl = FEATURE_IMAGE_PAGES ? getSiteUrl('image', image.id) : undefined;

const imageProps = (
	isRss
		? {
				src: imageMetadata,
				alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
				width: imageMetadata.height > imageMetadata.width ? 900 : 1200,
				format: IMAGE_FORMAT,
				quality: IMAGE_QUALITY,
			}
		: {
				src: imageMetadata,
				alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
				format: IMAGE_FORMAT,
				quality: IMAGE_QUALITY,
				...getImageLayoutProps({ imageMetadata, layout }),
				...getImagePlaceholderProps({ placeholder }),
			}
) satisfies LocalImageProps;

const caption = slotContents ? sanitizeCaption(slotContents) : undefined;
---

{
	isRss ? (
		<figure>
			{imageLinkUrl ? (
				<a href={imageLinkUrl}>
					<Image loading="lazy" {...imageProps} />
				</a>
			) : (
				<Image loading="lazy" {...imageProps} />
			)}
			{caption ? (
				<figcaption>
					<Fragment set:html={caption} />
				</figcaption>
			) : undefined}
		</figure>
	) : (
		<figure
			class:list={[
				'content-image',
				'not-prose',
				layout === 'medium'
					? 'mx-auto mb-2 max-w-content sm:px-small md:mb-4 md:px-medium'
					: undefined,
				layout === 'wide' ? 'mb-2 w-full sm:px-small md:px-medium' : undefined,
				layout === 'full' ? 'mb-2 w-full' : undefined,
			]}
		>
			{imageLinkUrl ? (
				<a href={imageLinkUrl}>
					<Image
						class:list={[
							'bg-fallback',
							'm-0 object-cover object-center text-sm text-transparent',
							layout === 'full' ? undefined : 'sm:rounded-sm',
						]}
						loading="lazy"
						{...imageProps}
					/>
				</a>
			) : (
				<Image
					class:list={[
						'bg-fallback',
						'm-0 object-cover object-center text-sm text-transparent',
						layout === 'full' ? undefined : 'sm:rounded-sm',
					]}
					loading="lazy"
					{...imageProps}
				/>
			)}
			{caption ? (
				<figcaption
					class:list={[
						'content-image-caption',
						'px-small py-1 text-sm italic leading-relaxed text-primary-500',
						layout === 'full' ? 'mx-auto max-w-content px-small md:px-medium' : 'sm:px-0',
					]}
				>
					<Fragment set:html={caption} />
				</figcaption>
			) : undefined}
		</figure>
	)
}
