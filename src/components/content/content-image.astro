---
import { Image } from 'astro:assets';

import type { ImageLayoutOption } from '@/lib/image/image-layout';
import type { LocalImageProps } from 'astro:assets';

import { FEATURE_IMAGE_PAGES } from '@/constants';
import { IMAGE_FORMAT, IMAGE_QUALITY } from '@/constants';
import { getImageById } from '@/lib/collections/images/utils';
import { getImageLayoutProps } from '@/lib/image/image-layout';
import { getImagePlaceholderProps } from '@/lib/image/image-placeholder';
import { getSiteUrl } from '@/lib/utils/routing';
import { sanitizeAltAttribute, sanitizeCaption } from '@/lib/utils/text';

interface Props {
	imageId: string;
	alt?: string;
	layout?: ImageLayoutOption;
}

const { imageId, alt: altProp, layout } = Astro.props;

const image = await getImageById(imageId);

// This controls how the component is rendered; RSS requires a less complex output
const { isRss } = Astro.locals;

const slotContents = (await Astro.slots.render('default')) as string | undefined;

const imageLinkUrl = FEATURE_IMAGE_PAGES && image?.id ? getSiteUrl('image', image.id) : undefined;

const imageProps = image
	? ((isRss
			? {
					src: image.data.src,
					alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
					width: image.data.src.height > image.data.src.width ? 900 : 1200,
					format: IMAGE_FORMAT,
					quality: IMAGE_QUALITY,
				}
			: {
					src: image.data.src,
					alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
					format: IMAGE_FORMAT,
					quality: IMAGE_QUALITY,
					...getImageLayoutProps({ imageMetadata: image.data.src, layout }),
					...getImagePlaceholderProps({ placeholder: image.data.placeholder }),
				}) satisfies LocalImageProps)
	: undefined;

const caption = slotContents ? sanitizeCaption(slotContents) : undefined;
---

{
	imageProps ? (
		isRss ? (
			<figure>
				{imageLinkUrl ? (
					<a href={imageLinkUrl}>
						<Image loading="lazy" {...imageProps} />
					</a>
				) : (
					<Image loading="lazy" {...imageProps} />
				)}
				{caption ? (
					<figcaption>
						<Fragment set:html={caption} />
					</figcaption>
				) : undefined}
			</figure>
		) : (
			<figure
				class:list={[
					'content-image',
					'not-prose',
					layout === 'medium'
						? 'max-w-content sm:px-small md:px-medium mx-auto mb-2 md:mb-4'
						: undefined,
					layout === 'wide' ? 'sm:px-small md:px-medium mb-2 w-full' : undefined,
					layout === 'full' ? 'mb-2 w-full' : undefined,
				]}
			>
				{imageLinkUrl ? (
					<a href={imageLinkUrl}>
						<Image
							class:list={[
								'bg-fallback',
								'm-0 object-cover object-center text-sm text-transparent',
								layout === 'full' ? undefined : 'sm:rounded-xs',
							]}
							loading="lazy"
							{...imageProps}
						/>
					</a>
				) : (
					<Image
						class:list={[
							'bg-fallback',
							'm-0 object-cover object-center text-sm text-transparent',
							layout === 'full' ? undefined : 'sm:rounded-xs',
						]}
						loading="lazy"
						{...imageProps}
					/>
				)}
				{caption ? (
					<figcaption
						class:list={[
							'content-image-caption',
							'px-small py-1 text-sm leading-relaxed italic',
							'text-primary-500 dark:text-primary-400',
							layout === 'full' ? 'max-w-content px-small md:px-medium mx-auto' : 'sm:px-0',
						]}
					>
						<Fragment set:html={caption} />
					</figcaption>
				) : undefined}
			</figure>
		)
	) : undefined
}
