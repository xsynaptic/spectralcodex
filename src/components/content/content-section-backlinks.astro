---
import type { CollectionEntry, CollectionKey } from 'astro:content';

import * as R from 'remeda';

import ContentSection from '#components/content/content-section.astro';
import ListColumnItem from '#components/list/list-column-item.astro';
import ListColumn from '#components/list/list-column.astro';
import Link from '#components/parts/link.astro';
import Multilingual from '#components/parts/multilingual.astro';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getContentBacklinks } from '#lib/metadata/metadata-backlinks.ts';
import { sortContentMetadataByDate } from '#lib/metadata/metadata-utils.ts';

interface Props {
	entry: CollectionEntry<CollectionKey>;
}

const { entry, ...props } = Astro.props;

const backlinkItems = await getContentBacklinks({ id: entry.id });

const backlinks = backlinkItems
	? R.pipe(
			backlinkItems,
			R.filter((backlinkItem) =>
				['ephemera', 'locations', 'posts'].includes(backlinkItem.collection)
			),
			R.sort(sortContentMetadataByDate),
			R.take(10)
		)
	: undefined;

const t = getTranslations();
---

{
	backlinks && backlinks.length > 0 ? (
		<ContentSection data-pagefind-ignore {...props}>
			<Fragment slot="section-title">{t('content.section.backlinks')}</Fragment>
			<ListColumn class="font-serif text-xs sm:text-sm">
				{backlinks.map(({ url, title, titleMultilingual }) => (
					<ListColumnItem>
						<Link href={url}>{title}</Link>
						{titleMultilingual ? <Multilingual content={titleMultilingual} /> : undefined}
					</ListColumnItem>
				))}
			</ListColumn>
		</ContentSection>
	) : undefined
}
