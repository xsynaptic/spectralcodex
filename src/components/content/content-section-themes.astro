---
import ContentSection from '#components/content/content-section.astro';
import ListRow from '#components/list/list-row.astro';
import DividedItem from '#components/parts/divided-item.astro';
import Link from '#components/parts/link.astro';
import Multilingual from '#components/parts/multilingual.astro';
import { getThemesByIdsFunction } from '#lib/collections/themes/utils.ts';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getMultilingualContent } from '#lib/i18n/i18n-utils.ts';
import { sortByContentCount } from '#lib/utils/collections.ts';
import { getContentUrl } from '#lib/utils/routing.ts';

interface Props {
	themeIds: Array<string> | undefined;
}

const { themeIds, ...props } = Astro.props;

const getThemesByIds = await getThemesByIdsFunction();

const themes = themeIds ? getThemesByIds(themeIds).sort(sortByContentCount) : undefined;

const t = getTranslations();
---

{
	themes && themes.length > 0 ? (
		<ContentSection data-pagefind-ignore {...props}>
			<Fragment slot="section-title">{t('collection.themes.labelPlural')}</Fragment>
			<ListRow>
				{themes.map((item) => {
					const titleMultilingual = getMultilingualContent(item.data, 'title');

					return (
						<DividedItem
							as="li"
							class="font-serif text-sm after:text-sm after:font-light"
							data-pagefind-filter="theme"
						>
							{item.data.title ? (
								<Link href={getContentUrl(item.collection, item.id)}>{item.data.title.trim()}</Link>
							) : undefined}
							{titleMultilingual ? (
								<>
									{' '}
									<Multilingual content={titleMultilingual} parenthesis={true} />
								</>
							) : undefined}
						</DividedItem>
					);
				})}
			</ListRow>
		</ContentSection>
	) : undefined
}
