---
import type { DividerColor, DividerContent } from '@/types/components';
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<Tag extends HTMLTag = HTMLTag> = Polymorphic<{
	as: Tag;
	class?: string | undefined;
	dividerColor?: DividerColor | undefined;
	dividerContent?: DividerContent | undefined;
	darkMode?: boolean | undefined;
}>;

const {
	as: Tag = 'div',
	class: className,
	dividerColor = 'default',
	dividerContent = 'slash',
	darkMode = true,
	...props
} = Astro.props;
---

<Tag
	class:list={[
		'divider-after inline-flex gap-1 last:after:content-none',
		(() => {
			switch (dividerColor) {
				case 'default': {
					return darkMode
						? 'after:text-primary-400 dark:after:text-primary-500'
						: 'after:text-primary-400';
				}
				case 'darker': {
					return 'after:text-primary-500 dark:after:text-primary-700';
				}
				case 'lighter': {
					return 'after:text-primary-300 dark:after:text-primary-600';
				}
				case 'hero': {
					return 'after:text-primary-500 sm:after:text-primary-300 sm:after:opacity-80 dark:after:text-primary-400 dark:sm:after:text-primary-700';
				}
				default: {
					dividerColor satisfies never;
					return '';
				}  
			}
		})(),
		(() => {
			switch (dividerContent) {
				case 'bar': {
					return 'after:content-bar';
				}
				case 'bullet': {
					return 'after:content-bullet';
				}
				case 'chevron': {
					return 'after:content-chevron';
				}
				case 'dot': {
					return 'after:content-dot';
				}
				case 'slash': {
					return 'after:content-slash';
				}
				default: {
					dividerContent satisfies never;
					return '';
				}
			}
		})(),
		className,
	]}
	{...props}
>
	<slot />
</Tag>
