---
import type { HTMLAttributes } from 'astro/types';

import type { DatePreset } from '#lib/utils/date.ts';

import { DatePresetEnum, parseContentDate } from '#lib/utils/date.ts';

interface Props extends HTMLAttributes<'time'> {
	date: string | Date;
	datePreset?: DatePreset;
	dateOptions?: Intl.DateTimeFormatOptions | undefined;
}

const datePresets = {
	[DatePresetEnum.Short]: {
		year: 'numeric',
		month: 'numeric',
		day: 'numeric',
		hour12: false,
		timeZone: 'UTC',
	},
	[DatePresetEnum.Medium]: {
		year: 'numeric',
		month: 'long',
		day: 'numeric',
		hour12: false,
		timeZone: 'UTC',
	},
	[DatePresetEnum.Long]: {
		year: 'numeric',
		month: 'long',
		day: 'numeric',
		hour: 'numeric',
		minute: 'numeric',
		hour12: false,
		timeZone: 'UTC',
		timeZoneName: 'short',
	},
} satisfies Record<DatePreset, Intl.DateTimeFormatOptions>;

const { date, datePreset = DatePresetEnum.Medium, dateOptions, ...props } = Astro.props;

const dateRaw = parseContentDate(date);

if (!dateRaw) throw new Error(`Invalid date: "${JSON.stringify(date)}"`);

const dateTimeAttribute = dateRaw.toISOString();

const dateDisplay = dateRaw.toLocaleDateString('en-US', {
	...datePresets[datePreset],
	...dateOptions,
});
---

<time datetime={dateTimeAttribute} {...props}>{dateDisplay}</time>
