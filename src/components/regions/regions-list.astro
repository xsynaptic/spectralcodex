---
import type { CollectionEntry } from 'astro:content';

import type { DividerContent } from '#components/parts/divided-item.astro';

import ListRow from '#components/list/list-row.astro';
import DividedItem from '#components/parts/divided-item.astro';
import Link from '#components/parts/link.astro';
import Multilingual from '#components/parts/multilingual.astro';
import { getRegionAncestorsFunction } from '#lib/collections/regions/utils.ts';
import { getPrimaryMultilingualContent } from '#lib/i18n/i18n-utils.ts';
import { getContentUrl } from '#lib/utils/routing.ts';

interface Props {
	terms: Array<CollectionEntry<'regions'>> | undefined;
	dividerContent?: DividerContent;
	showSingleRegionAncestors?: boolean;
	showTitleMultilingual?: boolean;
}

const {
	terms,
	dividerContent = 'dot',
	showSingleRegionAncestors,
	showTitleMultilingual = true,
} = Astro.props;

// Optionally expand the list of regions to include ancestors
async function getRegions() {
	const getRegionAncestors = await getRegionAncestorsFunction();

	const ancestors = terms?.length === 1 && terms[0] ? getRegionAncestors(terms[0]) : undefined;

	return ancestors ?? terms;
}

const regions = showSingleRegionAncestors ? await getRegions() : terms;
---

{
	regions && regions.length > 0 ? (
		<ListRow class="font-serif text-sm">
			{regions.map((entry) => {
				const titleMultilingual = showTitleMultilingual
					? getPrimaryMultilingualContent(entry.data, 'title')
					: undefined;

				return (
					<DividedItem as="li" dividerContent={dividerContent} data-pagefind-filter="region">
						{entry.data.title ? (
							<Link href={getContentUrl(entry.collection, entry.id)}>
								<Fragment set:html={entry.data.title} />
							</Link>
						) : undefined}
						{titleMultilingual ? (
							<>
								{' '}
								<Multilingual
									content={titleMultilingual}
									class="text-primary-600 dark:text-primary-400"
									parenthesis={true}
								/>
							</>
						) : undefined}
					</DividedItem>
				);
			})}
		</ListRow>
	) : undefined
}
