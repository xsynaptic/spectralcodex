---
import type { CollectionEntry } from 'astro:content';

import * as R from 'remeda';

import ContentSection from '#components/content/content-section.astro';
import FormatMarkdown from '#components/format/format-markdown.astro';
import AlertBox from '#components/parts/alert-box.astro';
import { getTranslations } from '#lib/utils/i18n.ts';

import { LocationStatusEnum } from '@spectralcodex/map-types';

interface Props {
	entry: CollectionEntry<'locations'>;
}

const { entry, ...props } = Astro.props;

const showDangerNotice = entry.data.safety
	? entry.data.safety <= 2
	: R.isIncludedIn(entry.data.status, [
			LocationStatusEnum.Abandoned,
			LocationStatusEnum.Idle,
			LocationStatusEnum.Remnants,
		]);

const showDemolishedNotice = entry.data.status === LocationStatusEnum.Demolished;

const t = getTranslations();
---

{
	showDangerNotice && !showDemolishedNotice ? (
		<ContentSection data-pagefind-ignore {...props}>
			<AlertBox status="warning" class="mb-small">
				<FormatMarkdown>{t('notice.danger')}</FormatMarkdown>
			</AlertBox>
		</ContentSection>
	) : undefined
}
{
	showDemolishedNotice ? (
		<ContentSection data-pagefind-ignore {...props}>
			<AlertBox status="error" class="mb-small">
				<FormatMarkdown>{t('notice.demolished')}</FormatMarkdown>
			</AlertBox>
		</ContentSection>
	) : undefined
}
