---
import type { CollectionEntry } from 'astro:content';

import { LocationStatusEnum } from '@spectralcodex/map-types';
import { transformMarkdown } from '@spectralcodex/unified-tools';
import * as R from 'remeda';

import type { LanguageCode } from '#lib/i18n/i18n-types.ts';

import ContentSection from '#components/content/content-section.astro';
import AlertBox from '#components/parts/alert-box.astro';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';

interface Props {
	entry: CollectionEntry<'locations'>;
	langCode?: Extract<LanguageCode, 'zh' | 'zh-CN' | 'ja' | 'ko'> | undefined;
}

const { entry, langCode, ...props } = Astro.props;

const showDangerNotice = entry.data.safety
	? entry.data.safety <= 2
	: R.isIncludedIn(entry.data.status, [
			LocationStatusEnum.Abandoned,
			LocationStatusEnum.Idle,
			LocationStatusEnum.Remnants,
		]);

const showDemolishedNotice = entry.data.status === LocationStatusEnum.Demolished;

const showChinese = langCode?.startsWith('zh');

const wrapCjkOptions = langCode ? { langCode: langCode.startsWith('zh') ? 'zh' : langCode } : {};

const t = getTranslations();
---

{
	showDangerNotice || showDemolishedNotice ? (
		<ContentSection class="flex flex-col gap-2" {...props} data-pagefind-ignore>
			{showDemolishedNotice ? (
				<AlertBox status="warning">
					<Fragment set:html={transformMarkdown({ input: t('notice.demolished') })} />
					{showChinese ? (
						<Fragment
							set:html={transformMarkdown({ input: t('notice.demolished'), wrapCjkOptions })}
						/>
					) : undefined}
				</AlertBox>
			) : undefined}
			{showDangerNotice && !showDemolishedNotice ? (
				<AlertBox status="warning">
					<Fragment set:html={transformMarkdown({ input: t('notice.danger') })} />
					{showChinese ? (
						<Fragment set:html={transformMarkdown({ input: t('notice.danger'), wrapCjkOptions })} />
					) : undefined}
				</AlertBox>
			) : undefined}
			{entry.data.entryQuality <= 1 ? (
				<AlertBox status="warning">
					<Fragment set:html={transformMarkdown({ input: t('notice.quality') })} />
					{showChinese ? (
						<Fragment
							set:html={transformMarkdown({ input: t('notice.quality'), wrapCjkOptions })}
						/>
					) : undefined}
				</AlertBox>
			) : undefined}
		</ContentSection>
	) : undefined
}
