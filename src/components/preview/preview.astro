---
import type { HTMLAttributes } from 'astro/types';
import type { RemoteImageProps } from 'astro:assets';

import { Image } from 'astro:assets';

import ImagePlaceholder from '#components/image/image-placeholder.astro';
import { IMAGE_FORMAT, IMAGE_QUALITY, TAILWIND_BREAKPOINT_SM } from '#constants.ts';
import { getImageById } from '#lib/collections/images/utils.ts';
import { getImageSrcsetWidths } from '#lib/image/image-layout.ts';
import { renderSlot } from '#lib/utils/astro.ts';
import { sanitizeAltAttribute } from '#lib/utils/text.ts';

interface Props extends HTMLAttributes<'div'> {
	imageId?: string | undefined;
	isImageSquare?: boolean;
	linkUrl: string;
	alt: string;
}

const { imageId, isImageSquare, linkUrl, alt, ...props } = Astro.props;

const imageEntry = imageId ? await getImageById(imageId) : undefined;

// Dimensions chosen for a two-column grid
const imageProps = imageEntry
	? ({
			src: imageEntry.data.src,
			width: 450,
			height: 300,
			alt: sanitizeAltAttribute(alt),
			widths: getImageSrcsetWidths({
				maxWidth: imageEntry.data.width,
				widths: [450, 600, 900, 1200],
			}),
			sizes: `(max-width: ${TAILWIND_BREAKPOINT_SM}) 100vw, 450px`,
			format: IMAGE_FORMAT,
			quality: IMAGE_QUALITY,
		} satisfies RemoteImageProps)
	: undefined;

const titleMultilingual = await renderSlot(Astro.slots, 'preview-title-multilingual');
const subtitle = await renderSlot(Astro.slots, 'preview-subtitle');
const description = await renderSlot(Astro.slots, 'preview-description');

const placeholder = imageEntry ? imageEntry.data.placeholder : undefined;
---

<div
	class:list={[
		'rounded-md border p-2 shadow-inner',
		'border-primary-300 bg-primary-200 dark:border-primary-700 dark:bg-primary-900',
	]}
	{...props}
>
	{
		imageProps ? (
			<ImagePlaceholder placeholder={placeholder}>
				<a href={linkUrl}>
					<Image
						class:list={[
							'w-full rounded-xs object-cover object-center text-sm text-transparent',
							isImageSquare ? 'aspect-square' : 'aspect-[3/2]',
						]}
						loading="lazy"
						{...imageProps}
					/>
				</a>
			</ImagePlaceholder>
		) : (
			<div
				class:list={[
					'bg-fallback dark:bg-fallback-dark',
					'w-full rounded-xs text-sm text-transparent shadow-inner',
					isImageSquare ? 'aspect-square' : 'aspect-[3/2]',
				]}
			/>
		)
	}
	<h2 class="mt-1 flex flex-wrap gap-x-1 text-xl">
		<a
			href={linkUrl}
			class:list={[
				'font-display font-bold transition-colors ease-in',
				'text-primary-700 hover:text-accent-500 dark:text-primary-300 dark:hover:text-accent-400',
			]}
		>
			<slot name="preview-title" />
		</a>
		{
			titleMultilingual ? (
				<div class:list={['inline-flex font-semibold', 'text-primary-500 dark:text-primary-400']}>
					<span class="font-light">(</span>
					<Fragment set:html={titleMultilingual} />
					<span class="font-light">)</span>
				</div>
			) : undefined
		}
	</h2>
	{
		subtitle ? (
			<div
				class:list={['mt-1 flex flex-wrap gap-1 text-sm', 'text-primary-500 dark:text-primary-400']}
			>
				<Fragment set:html={subtitle} />
			</div>
		) : undefined
	}
	{
		description ? (
			<div class="prose prose-sm dark:prose-invert">
				<Fragment set:html={description} />
			</div>
		) : undefined
	}
</div>
