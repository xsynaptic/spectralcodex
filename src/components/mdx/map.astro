---
import type { HTMLAttributes } from 'astro/types';

import * as R from 'remeda';

import MapComponent from '#components/map/map-component.astro';
import Container from '#components/parts/container.astro';
import { getLocationsByIdsFunction } from '#lib/collections/locations/utils.ts';
import { getMapData } from '#lib/map/map-data.ts';
import { getLocationsFeatureCollection } from '#lib/map/map-locations.ts';

interface Props extends HTMLAttributes<'div'> {
	locations: Array<string>;
	languages?: Array<string> | undefined; // For controlling interface language
	showHidden: boolean;
}

const { locations: locationIds, languages, showHidden = false, ...props } = Astro.props;

// No map components in RSS allowed
const { isRss } = Astro.locals;

const getLocationsByReference = await getLocationsByIdsFunction();

// API endpoint is undefined because geodata *must* be inlined with this method
// We can't know in advance what locations are requested by content without a big performance hit
const { hasGeodata, ...mapComponentProps } = getMapData({
	featureCollection: R.pipe(locationIds, getLocationsByReference, (locations) =>
		getLocationsFeatureCollection(locations, { showAllLocations: showHidden })
	),
	mapApiBaseUrl: undefined,
	languages,
});
---

{
	hasGeodata && !isRss ? (
		<Container as="div" fillViewport={true} {...props} class="not-prose" data-pagefind-ignore>
			<MapComponent mapComponentProps={mapComponentProps} />
		</Container>
	) : undefined
}
