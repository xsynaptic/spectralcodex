---
import type { Page } from 'astro';
import type { HTMLAttributes } from 'astro/types';

import * as R from 'remeda';
import urlJoin from 'url-join';

import Link from '#components/parts/link.astro';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getSiteUrl } from '#lib/utils/routing.ts';

interface Props extends HTMLAttributes<'nav'> {
	class?: string | undefined;
	page: Page;
}

const { class: className, page, ...props } = Astro.props;

interface PaginationData {
	getPageNumberLink: (pageNumber: number) => string;
	pagePrevLink: string | undefined;
	pageNextLink: string | undefined;
	pageArray: Array<number>;
}

/**
 * This function adapted from a comment found on this popular gist
 * Note: `-1` is converted to a divider (...) at the component level
 * @link https://gist.github.com/kottenator/9d936eb3e4e3c3e02598?permalink_comment_id=4215826#gistcomment-4215826
 */
function getPageNumberArray({
	currentPage,
	pageCount,
	pagesShown,
	minimumPagesShown = 5,
}: {
	currentPage: number;
	pageCount: number;
	pagesShown: number;
	minimumPagesShown?: number;
}) {
	let delta: number;

	const centerPagesShown = pagesShown - 5;
	const boundaryPagesShown = pagesShown - 3;

	currentPage = R.clamp(currentPage, { min: 1, max: pageCount });
	pagesShown = R.clamp(pagesShown, { min: minimumPagesShown, max: pageCount });

	if (pageCount <= pagesShown) {
		delta = pagesShown;
	} else {
		delta =
			currentPage < boundaryPagesShown || currentPage > pageCount - boundaryPagesShown
				? boundaryPagesShown
				: centerPagesShown;
	}

	const range = {
		start: Math.round(currentPage - delta / 2),
		end: Math.round(currentPage + delta / 2),
	};

	if (range.start - 1 === 1 || range.end + 1 === pageCount) {
		range.start += 1;
		range.end += 1;
	}

	let pages =
		currentPage > delta
			? R.range(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount) + 1)
			: R.range(1, Math.min(pageCount, delta + 1) + 1);

	if (currentPage > pageCount - boundaryPagesShown && pageCount > pagesShown) {
		pages = R.range(pageCount - delta, pageCount + 1);
	}

	const withDots = (value: number, pair: Array<number>) =>
		pages.length + 1 === pageCount ? [value] : pair;

	const lastPage = pages.at(-1);

	if (pages.at(0) !== 1) {
		pages = [...withDots(1, [1, -1]), ...pages];
	}

	if (lastPage && lastPage < pageCount) {
		pages = [...pages, ...withDots(pageCount, [-1, pageCount])];
	}

	return pages;
}

function getPaginationData({
	page,
	pageCountMax = 12,
}: {
	page: Page;
	pageCountMax?: number;
}): PaginationData {
	const { currentPage, lastPage: pageCount, url } = page;

	// Remove the page number (and only the page number) from the end of the current URL
	const pageBasePath = getSiteUrl(url.current.replace(new RegExp(`/${String(currentPage)}$`), ''));

	// Get the URL for a given page
	const getPageNumberLink = (pageNumber: number) =>
		pageNumber === 1 ? pageBasePath : urlJoin(pageBasePath, String(pageNumber), '/');

	// Generate a list of page numbers, with special handling for large numbers of pages
	const pageArray =
		pageCount <= pageCountMax
			? R.range(1, pageCount + 1)
			: getPageNumberArray({ currentPage, pageCount, pagesShown: pageCountMax });

	return {
		getPageNumberLink,
		pagePrevLink: url.prev ?? undefined,
		pageNextLink: url.next ?? undefined,
		pageArray,
	};
}

const { getPageNumberLink, pagePrevLink, pageNextLink, pageArray } = getPaginationData({ page });

// Hide midpoint numbers on smaller viewports; only triggered when midpoint numbers exist
let isMidpointNumbers = false;

const t = getTranslations();

function getPageNumberAriaLabel(pageNumber: number) {
	return t('site.pagination.pageNumber.label').replaceAll('%s', String(pageNumber));
}
---

{
	pagePrevLink || pageNextLink ? (
		<nav class:list={[className]} aria-label={t('site.pagination.label')} {...props}>
			<ul
				class:list={[
					'flex flex-wrap gap-4 text-base font-medium tabular-nums md:gap-1 md:text-sm',
					page.lastPage >= 10 ? 'justify-between' : undefined,
				]}
			>
				{pagePrevLink ? (
					<li class="flex flex-wrap gap-1 pr-2">
						<span class:list={['select-none', 'text-accent-300 dark:text-accent-400']}>
							&lsaquo;
						</span>
						<Link href={pagePrevLink} aria-label={t('pagination.previous')}>
							{t('pagination.previous')}
						</Link>
					</li>
				) : undefined}
				{pageArray.map((pageNumber) => {
					switch (pageNumber) {
						case -1: {
							isMidpointNumbers = !isMidpointNumbers;

							return (
								<li
									class:list={[
										'text-primary-300 dark:text-primary-600',
										isMidpointNumbers ? 'hidden md:block' : undefined,
									]}
								>
									&#x22EF;
								</li>
							);
						}
						case page.currentPage: {
							return (
								<li class="px-2 font-bold first:pl-0 last:pr-0" aria-current="page">
									{String(pageNumber)}
								</li>
							);
						}
						default: {
							return (
								<li
									class:list={[
										'first:-ml-2 last:-mr-2',
										isMidpointNumbers ? 'hidden md:block' : undefined,
									]}
								>
									<Link
										href={getPageNumberLink(pageNumber)}
										class="px-2"
										aria-label={getPageNumberAriaLabel(pageNumber)}
									>
										{String(pageNumber)}
									</Link>
								</li>
							);
						}
					}
				})}
				{pageNextLink ? (
					<li class="flex flex-wrap gap-1 pl-2">
						<Link href={pageNextLink} aria-label={t('pagination.next')}>
							{t('pagination.next')}
						</Link>
						<span class:list={['select-none', 'text-accent-300 dark:text-accent-500']}>
							&rsaquo;
						</span>
					</li>
				) : undefined}
			</ul>
		</nav>
	) : undefined
}
