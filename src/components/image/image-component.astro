---
import type { HTMLAttributes } from 'astro/types';
import type { RemoteImageProps } from 'astro:assets';

import { Image } from 'astro:assets';

import type { ImageLayout } from '#lib/image/image-layout.ts';

import ImageMetadata from '#components/image/image-metadata.astro';
import ImagePlaceholder from '#components/image/image-placeholder.astro';
import { FEATURE_IMAGE_METADATA } from '#constants.ts';
import { IMAGE_FORMAT, IMAGE_QUALITY } from '#constants.ts';
import { getImageById } from '#lib/collections/images/utils.ts';
import { getImageLayoutProps, ImageLayoutEnum } from '#lib/image/image-layout.ts';
import { renderSlot } from '#lib/utils/astro.ts';
import { sanitizeAltAttribute, sanitizeCaption } from '#lib/utils/text.ts';

interface Props extends HTMLAttributes<'figure'> {
	imageId: string;
	alt?: string;
	layout?: ImageLayout;
	showMetadata?: boolean;
}

const {
	imageId,
	alt: altProp,
	layout = ImageLayoutEnum.Default,
	showMetadata = false,
	...props
} = Astro.props;

// This controls how the component is rendered; feeds requires a less complex output
const { isFeed } = Astro.locals;

const slotContents = await renderSlot(Astro.slots, 'default');

const imageEntry = await getImageById(imageId);

const imageProps = imageEntry
	? ((isFeed
			? {
					src: imageEntry.data.src,
					alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
					width: imageEntry.data.height > imageEntry.data.width ? 900 : 1200,
					height: imageEntry.data.height > imageEntry.data.width ? 120 : 900,
					format: IMAGE_FORMAT,
					quality: IMAGE_QUALITY,
				}
			: {
					src: imageEntry.data.src,
					alt: sanitizeAltAttribute(altProp ?? slotContents ?? ''),
					format: IMAGE_FORMAT,
					quality: IMAGE_QUALITY,
					...getImageLayoutProps({
						width: imageEntry.data.width,
						height: imageEntry.data.height,
						layout,
					}),
				}) satisfies RemoteImageProps)
	: undefined;

const caption = slotContents ? sanitizeCaption(slotContents) : undefined;

const placeholder = imageEntry ? imageEntry.data.placeholder : undefined;
---

{
	imageProps ? (
		isFeed ? (
			<figure {...props}>
				<Image loading="lazy" {...imageProps} />
				{caption ? (
					<figcaption>
						<Fragment set:html={caption} />
					</figcaption>
				) : undefined}
			</figure>
		) : (
			<figure
				class:list={[
					'@container', // Used by image metadata
					'content-image', // Custom CSS styles defined in src/styles/content.css
					'not-prose',
					layout === ImageLayoutEnum.Default
						? 'max-w-content sm:px-small md:px-medium mx-auto mb-2 md:mb-4'
						: undefined,
					layout === ImageLayoutEnum.Wide ? 'sm:px-small md:px-medium mb-2 w-full' : undefined,
					layout === ImageLayoutEnum.Full ? 'mb-2 w-full' : undefined,
				]}
				{...props}
			>
				<ImagePlaceholder
					class:list={['relative', layout === ImageLayoutEnum.Full ? undefined : 'sm:rounded-xs']}
					placeholder={placeholder}
				>
					<Image
						class:list={[
							'm-0 object-cover object-center text-sm text-transparent',
							layout === ImageLayoutEnum.Full ? undefined : 'sm:rounded-xs',
						]}
						loading="lazy"
						{...imageProps}
					/>
					{FEATURE_IMAGE_METADATA && showMetadata && imageEntry ? (
						<ImageMetadata entry={imageEntry} />
					) : undefined}
				</ImagePlaceholder>
				{caption ? (
					<figcaption
						class:list={[
							'content-image-caption',
							'px-small py-1 text-sm leading-relaxed italic',
							'text-primary-500 dark:text-primary-400',
							layout === ImageLayoutEnum.Full
								? 'max-w-content px-small md:px-medium mx-auto'
								: 'sm:px-0',
						]}
					>
						<Fragment set:html={caption} />
					</figcaption>
				) : undefined}
			</figure>
		)
	) : undefined
}
