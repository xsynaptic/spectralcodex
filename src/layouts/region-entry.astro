---
import type { Page } from 'astro';
import type { CollectionEntry } from 'astro:content';

import type { RegionsOption } from '#lib/collections/regions/options.ts';
import type { MapComponentData } from '#lib/map/map-types.ts';
import type { ContentMetadataItem } from '#lib/metadata/metadata-types.ts';

import ContentDescription from '#components/content/content-description.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentSectionLinks from '#components/content/content-section-links.astro';
import ContentSectionMap from '#components/content/content-section-map.astro';
import ContentSectionPreviewGrid from '#components/content/content-section-preview-grid.astro';
import ContentSectionSources from '#components/content/content-section-sources.astro';
import ImageHeroCarousel from '#components/image-hero/image-hero-carousel.astro';
import MainSite from '#components/main/main-site.astro';
import DividedItem from '#components/parts/divided-item.astro';
import CollectionLink from '#components/parts/link-collection.astro';
import Multilingual from '#components/parts/multilingual.astro';
import RegionsBreadcrumbs from '#components/regions/regions-breadcrumbs.astro';
import RegionsRelated from '#components/regions/regions-related.astro';
import { getMultilingualContent } from '#lib/i18n/i18n-utils.ts';
import { getImageSetMetadata } from '#lib/image/image-set.ts';
import { getPagefindBodyProp } from '#lib/utils/pagefind.ts';
import { getSeoHideSearch, getSeoImageProps } from '#lib/utils/seo.ts';

interface Props {
	entry: CollectionEntry<'regions'>;
	page: Page<ContentMetadataItem>;
	mapData: MapComponentData;
	regionsOption?: RegionsOption;
}

const { page, mapData, entry, regionsOption } = Astro.props;

const titleMultilingual = getMultilingualContent(entry.data, 'title');

const imageSetMetadata = await getImageSetMetadata({ imageSet: entry.data.imageSet });

const hasHeroImage = !!imageSetMetadata && imageSetMetadata.length > 0;
---

<MainSite
	meta={{
		title: titleMultilingual
			? `${entry.data.title} (${titleMultilingual.value})`
			: entry.data.title,
		description: entry.data.description ?? entry.body ?? undefined,
		image: getSeoImageProps({
			...(hasHeroImage ? { id: `${entry.collection}/${entry.id}` } : {}),
			alt: entry.data.title,
		}),
		...getSeoHideSearch(entry.data.hideSearch),
		prefetchUrls: mapData.prefetchUrls,
	}}
	hasHeroImage={hasHeroImage}
>
	<article {...getPagefindBodyProp(!!entry.data.hideSearch || page.currentPage !== 1)}>
		{
			hasHeroImage ? (
				<ImageHeroCarousel imageSet={imageSetMetadata} class="sm:mb-small">
					<ContentHeader showFeatured={true}>
						<Fragment slot="header-title">{entry.data.title}</Fragment>
						<Fragment slot="header-title-multilingual">
							<Multilingual content={titleMultilingual} />
						</Fragment>
						<Fragment slot="header-subtitle">
							<DividedItem dividerColor="hero">
								<CollectionLink collection={entry.collection} showFeatured={true} />
							</DividedItem>
							{entry.data.parent ? (
								<DividedItem dividerColor="hero">
									<RegionsBreadcrumbs entry={entry} showFeatured={true} dividerColor="hero" />
								</DividedItem>
							) : undefined}
						</Fragment>
					</ContentHeader>
				</ImageHeroCarousel>
			) : (
				<ContentHeader>
					<Fragment slot="header-title">{entry.data.title}</Fragment>
					<Fragment slot="header-title-multilingual">
						<Multilingual content={titleMultilingual} />
					</Fragment>
					<Fragment slot="header-subtitle">
						<DividedItem>
							<CollectionLink collection={entry.collection} />
						</DividedItem>
						{entry.data.parent ? (
							<DividedItem>
								<RegionsBreadcrumbs entry={entry} showFeatured={false} />
							</DividedItem>
						) : undefined}
					</Fragment>
				</ContentHeader>
			)
		}
		<ContentDescription entry={entry} />
		<RegionsRelated entry={entry} limit={regionsOption?.termsRelatedLimit}>
			{
				regionsOption?.termsChildrenLabel ? (
					<Fragment slot="regions-children-title">{regionsOption.termsChildrenLabel}</Fragment>
				) : undefined
			}
			{
				regionsOption?.termsSiblingsLabel ? (
					<Fragment slot="regions-siblings-title">{regionsOption.termsSiblingsLabel}</Fragment>
				) : undefined
			}
		</RegionsRelated>
		<ContentSectionMap mapData={mapData} mapId={`map-${entry.id}`} />
		<ContentSectionPreviewGrid
			page={page}
			previewItemProps={{
				showDate: true,
				showRegion: true,
				showTitleMultilingual: true,
			}}
		/>
		<ContentSectionLinks entry={entry} />
		<ContentSectionSources entry={entry} />
	</article>
</MainSite>
