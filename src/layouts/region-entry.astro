---
import type { Page } from 'astro';
import type { CollectionEntry } from 'astro:content';

import { render } from 'astro:content';

import type { RegionsOption } from '#lib/collections/regions/options.ts';
import type { MapComponentData } from '#lib/map/map-types.ts';
import type { ContentMetadataItem } from '#types/metadata.ts';

import MainSite from '#components/main/main-site.astro';
import ContentCollectionLink from '#components/content/content-collection-link.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentSectionLinks from '#components/content/content-section-links.astro';
import ContentSection from '#components/content/content-section.astro';
import ImageHeroCarousel from '#components/image-hero/image-hero-carousel.astro';
import MapComponent from '#components/map/map-component.astro';
import Pagination from '#components/pagination/pagination.astro';
import DividedItem from '#components/parts/divided-item.astro';
import ProseBody from '#components/parts/prose-body.astro';
import PreviewGrid from '#components/preview/preview-grid.astro';
import RegionsBreadcrumbs from '#components/regions/regions-breadcrumbs.astro';
import RegionsRelated from '#components/regions/regions-related.astro';
import { getImageSetMetadata } from '#lib/image/image-set.ts';
import { getTranslations } from '#lib/utils/i18n.ts';
import { getSeoImageProps } from '#lib/utils/seo.ts';

interface Props {
	entry: CollectionEntry<'regions'>;
	page: Page<ContentMetadataItem>;
	mapData: MapComponentData;
	regionsOption?: RegionsOption;
}

const {
	page,
	mapData: { hasGeodata, ...mapComponentProps },
	entry,
	regionsOption,
} = Astro.props;

const {
	data: { title, titleAlt, description, imageSet },
} = entry;

const imageSetMetadata = await getImageSetMetadata({ imageSet });

const hasHeroImage = !!imageSetMetadata && imageSetMetadata.length > 0;

const { Content } = await render(entry);

const t = getTranslations();
---

<MainSite
	meta={{
		title: titleAlt ? `${title} (${titleAlt})` : title,
		description: description ?? entry.body ?? undefined,
		image: getSeoImageProps({
			...(hasHeroImage ? { id: `${entry.collection}/${entry.id}` } : {}),
			alt: title,
		}),
		prefetchUrls: mapComponentProps.prefetchUrls,
	}}
	hasHeroImage={hasHeroImage}
>
	<article>
		{
			hasHeroImage ? (
				<ImageHeroCarousel imageSet={imageSetMetadata} class="sm:mb-small">
					<ContentHeader showFeatured={true}>
						<Fragment slot="header-title">{title}</Fragment>
						<Fragment slot="header-title-alt">{titleAlt}</Fragment>
						<Fragment slot="header-subtitle">
							<DividedItem dividerColor="hero">
								<ContentCollectionLink collection={entry.collection} showFeatured={true} />
							</DividedItem>
							{entry.data.parent ? (
								<DividedItem dividerColor="hero">
									<RegionsBreadcrumbs entry={entry} showFeatured={true} dividerColor="hero" />
								</DividedItem>
							) : undefined}
						</Fragment>
					</ContentHeader>
				</ImageHeroCarousel>
			) : (
				<ContentHeader>
					<Fragment slot="header-title">{title}</Fragment>
					<Fragment slot="header-title-alt">{titleAlt}</Fragment>
					<Fragment slot="header-subtitle">
						<DividedItem>
							<ContentCollectionLink collection={entry.collection} />
						</DividedItem>
						{entry.data.parent ? (
							<DividedItem>
								<RegionsBreadcrumbs entry={entry} showFeatured={false} />
							</DividedItem>
						) : undefined}
					</Fragment>
				</ContentHeader>
			)
		}
		<ProseBody class="pb-medium"><Content /></ProseBody>
		<RegionsRelated entry={entry} limit={regionsOption?.termsRelatedLimit}>
			{
				regionsOption?.termsChildrenLabel ? (
					<Fragment slot="regions-children-title">{regionsOption.termsChildrenLabel}</Fragment>
				) : undefined
			}
			{
				regionsOption?.termsSiblingsLabel ? (
					<Fragment slot="regions-siblings-title">{regionsOption.termsSiblingsLabel}</Fragment>
				) : undefined
			}
		</RegionsRelated>
		{
			hasGeodata ? (
				<ContentSection fillViewport={true}>
					<Fragment slot="section-title">{t('content.section.map')}</Fragment>
					<MapComponent {...mapComponentProps} />
				</ContentSection>
			) : undefined
		}
		<ContentSection>
			<Fragment slot="section-title">{t('content.section.content')}</Fragment>
			<PreviewGrid items={page.data} showDate={true} showCollection={true} showTitleAlt={true} />
			<Pagination class="mt-small md:mt-medium" page={page} />
		</ContentSection>
		<ContentSectionLinks entry={entry} />
	</article>
</MainSite>
