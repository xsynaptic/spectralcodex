---
import type { CollectionEntry } from 'astro:content';

import type { MapComponentData } from '#lib/map/map-types.ts';
import type { ContentMetadataItem } from '#lib/metadata/metadata-types.ts';

import ContentBody from '#components/content/content-body.astro';
import ContentCollectionLink from '#components/content/content-collection-link.astro';
import ContentDate from '#components/content/content-date.astro';
import ContentDescription from '#components/content/content-description.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentImageEntry from '#components/content/content-image-entry.astro';
import ContentSectionBacklinks from '#components/content/content-section-backlinks.astro';
import ContentSectionDateVisited from '#components/content/content-section-date-visited.astro';
import ContentSectionLinks from '#components/content/content-section-links.astro';
import ContentSectionMap from '#components/content/content-section-map.astro';
import ContentSectionSeries from '#components/content/content-section-series.astro';
import ContentSectionThemes from '#components/content/content-section-themes.astro';
import ContentSection from '#components/content/content-section.astro';
import FormatCjk from '#components/format/format-cjk.astro';
import FormatMarkdown from '#components/format/format-markdown.astro';
import ImageHero from '#components/image-hero/image-hero.astro';
import LocationsHeritage from '#components/locations/locations-heritage.astro';
import LocationsNearbyList from '#components/locations/locations-nearby-list.astro';
import LocationsNotices from '#components/locations/locations-notices.astro';
import MainSite from '#components/main/main-site.astro';
import AlertBox from '#components/parts/alert-box.astro';
import DividedItem from '#components/parts/divided-item.astro';
import Multilingual from '#components/parts/multilingual.astro';
import ProseBody from '#components/parts/prose-body.astro';
import ProseDescription from '#components/parts/prose-description.astro';
import PreviewGrid from '#components/preview/preview-grid.astro';
import RegionsBreadcrumbs from '#components/regions/regions-breadcrumbs.astro';
import { getLocationHasContent } from '#lib/collections/locations/utils.ts';
import { getFirstRegionByReferenceFunction } from '#lib/collections/regions/utils.ts';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getMultilingualContent } from '#lib/i18n/i18n-utils.ts';
import { DatePresetEnum } from '#lib/utils/date.ts';
import { getPagefindBodyProp } from '#lib/utils/pagefind.ts';
import { getSeoImageProps } from '#lib/utils/seo.ts';

interface Props {
	entry: CollectionEntry<'locations'>;
	mapData: MapComponentData;
	metadataItems: Array<ContentMetadataItem>;
}

const { entry, mapData, metadataItems } = Astro.props;

// This allows for titles to be overridden for sensitive or hidden sites
const title = entry.data.override?.title ?? entry.data.title;
const titleMultilingual =
	getMultilingualContent(entry.data.override, 'title') ??
	getMultilingualContent(entry.data, 'title');

const getFirstRegionByReference = await getFirstRegionByReferenceFunction();

const regionPrimary = getFirstRegionByReference(entry.data.override?.regions ?? entry.data.regions);

const themeIds = entry.data.themes?.map(({ id }) => id);

const hasContent = getLocationHasContent(entry);

const t = getTranslations();
---

<MainSite
	meta={{
		title: titleMultilingual ? `${title} (${titleMultilingual.value})` : title,
		description: entry.data.description,
		image: getSeoImageProps({
			...(entry.data.imageFeatured ? { id: entry.id } : { fallback: 'og-image-location' }),
			alt: title,
		}),
	}}
	hasHeroImage={!!entry.data.imageHero}
	hasReadingBar={true}
>
	<article {...getPagefindBodyProp(entry.data.hideSearch)}>
		{
			entry.data.imageHero ? (
				<ImageHero imageId={entry.data.imageHero} alt={title} class="sm:mb-small">
					<ContentHeader showFeatured={true}>
						<Fragment slot="header-title">{title}</Fragment>
						<Fragment slot="header-title-multilingual">
							<Multilingual content={titleMultilingual} />
						</Fragment>
						<Fragment slot="header-subtitle">
							<DividedItem dividerColor="hero">
								<ContentCollectionLink collection="locations" showFeatured={true} />
							</DividedItem>
							{regionPrimary ? (
								<DividedItem dividerColor="hero">
									<RegionsBreadcrumbs
										entry={regionPrimary}
										showCurrentLink={true}
										showFeatured={true}
										dividerColor="hero"
									/>
								</DividedItem>
							) : undefined}
							<DividedItem dividerColor="hero">
								<ContentDate
									date={entry.data.dateCreated}
									dateUpdated={entry.data.dateUpdated}
									datePreset={DatePresetEnum.Medium}
								/>
							</DividedItem>
						</Fragment>
					</ContentHeader>
				</ImageHero>
			) : (
				<ContentHeader>
					<Fragment slot="header-title">{title}</Fragment>
					<Fragment slot="header-title-multilingual">
						<Multilingual content={titleMultilingual} />
					</Fragment>
					<Fragment slot="header-subtitle">
						<DividedItem>
							<ContentCollectionLink collection="locations" />
						</DividedItem>
						{regionPrimary ? (
							<DividedItem>
								<RegionsBreadcrumbs entry={regionPrimary} showCurrentLink={true} />
							</DividedItem>
						) : undefined}
						<DividedItem>
							<ContentDate
								date={entry.data.dateCreated}
								dateUpdated={entry.data.dateUpdated}
								datePreset={DatePresetEnum.Medium}
							/>
						</DividedItem>
					</Fragment>
				</ContentHeader>
			)
		}
		{
			hasContent ? (
				<ProseBody class="pb-small" data-reading-frame>
					<ContentBody entry={entry} />
				</ProseBody>
			) : (
				<>
					{entry.data.imageFeatured ? (
						<ContentImageEntry imageId={entry.data.imageFeatured} alt={title} />
					) : undefined}
					<ContentSection>
						<Fragment slot="section-description">
							<ProseDescription>
								<ContentDescription entry={entry} />
							</ProseDescription>
						</Fragment>
					</ContentSection>
				</>
			)
		}
		{
			entry.data.entryQuality === 1 ? (
				<ContentSection data-pagefind-ignore>
					<AlertBox status="warning">
						<FormatMarkdown>{t('notice.quality')}</FormatMarkdown>
					</AlertBox>
				</ContentSection>
			) : undefined
		}
		<LocationsHeritage heritage={entry.data.heritage} />
		{entry.data.hideLocation ? undefined : <ContentSectionLinks entry={entry} />}
		{
			entry.data.hideLocation ? undefined : (
				<ContentSectionDateVisited dateVisited={entry.data.dateVisited} />
			)
		}
		<ContentSectionThemes themeIds={themeIds} />
		<ContentSectionBacklinks entry={entry} />
		<ContentSectionSeries entry={entry} />
		<ContentSection data-pagefind-ignore>
			<Fragment slot="section-title">{t('content.section.content')}</Fragment>
			<PreviewGrid items={metadataItems} showDate={true} showRegion={true} />
		</ContentSection>
		<LocationsNotices entry={entry} />
		<ContentSectionMap mapData={mapData} mapId={`map-${entry.id}`}>
			{
				entry.data.address && !entry.data.hideLocation ? (
					<address class="px-small text-primary-400 mt-1 text-xs not-italic sm:px-0">
						{t('locations.address.label')}:{' '}
						{regionPrimary?.data.langCode ? (
							<span>
								<FormatCjk langCode={regionPrimary.data.langCode}>{entry.data.address}</FormatCjk>
							</span>
						) : (
							<span>{entry.data.address}</span>
						)}
					</address>
				) : undefined
			}
		</ContentSectionMap>
		<LocationsNearbyList entry={entry} />
	</article>
</MainSite>
