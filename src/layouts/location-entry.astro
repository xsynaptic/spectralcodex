---
import type { CollectionEntry } from 'astro:content';

import type { MapComponentData } from '#lib/map/map-types.ts';
import type { ContentMetadataItem } from '#lib/metadata/metadata-types.ts';

import ContentDate from '#components/content/content-date.astro';
import ContentDescription from '#components/content/content-description.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentSectionBacklinks from '#components/content/content-section-backlinks.astro';
import ContentSectionDateVisited from '#components/content/content-section-date-visited.astro';
import ContentSectionLinks from '#components/content/content-section-links.astro';
import ContentSectionMap from '#components/content/content-section-map.astro';
import ContentSectionPreviewGrid from '#components/content/content-section-preview-grid.astro';
import ContentSectionRelated from '#components/content/content-section-related.astro';
import ContentSectionSeries from '#components/content/content-section-series.astro';
import ContentSectionThemes from '#components/content/content-section-themes.astro';
import FormatCjk from '#components/format/format-cjk.astro';
import ImageHero from '#components/image-hero/image-hero.astro';
import ImageComponent from '#components/image/image-component.astro';
import LocationsHeritage from '#components/locations/locations-heritage.astro';
import LocationsNearbyList from '#components/locations/locations-nearby-list.astro';
import LocationsNotices from '#components/locations/locations-notices.astro';
import MainSite from '#components/main/main-site.astro';
import DividedItem from '#components/parts/divided-item.astro';
import CollectionLink from '#components/parts/link-collection.astro';
import Multilingual from '#components/parts/multilingual.astro';
import RegionsBreadcrumbs from '#components/regions/regions-breadcrumbs.astro';
import { getFirstRegionByReferenceFunction } from '#lib/collections/regions/utils.ts';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getMultilingualContent } from '#lib/i18n/i18n-utils.ts';
import { getHasContent } from '#lib/utils/astro.ts';
import { DatePresetEnum } from '#lib/utils/date.ts';
import { getPagefindBodyProp } from '#lib/utils/pagefind.ts';
import { getSeoImageProps } from '#lib/utils/seo.ts';

interface Props {
	entry: CollectionEntry<'locations'>;
	mapData: MapComponentData;
	metadataItems: Array<ContentMetadataItem>;
}

const { entry, mapData, metadataItems } = Astro.props;

// This allows for titles to be overridden for sensitive or hidden sites
const title = entry.data.override?.title ?? entry.data.title;
const titleMultilingual =
	getMultilingualContent(entry.data.override, 'title') ??
	getMultilingualContent(entry.data, 'title');

const getFirstRegionByReference = await getFirstRegionByReferenceFunction();

const regionPrimary = getFirstRegionByReference(entry.data.override?.regions ?? entry.data.regions);
const regionLangCode = regionPrimary?.data.langCode;

const themeIds = entry.data.themes?.map(({ id }) => id);

const hasContent = getHasContent(entry);
const hideLocation = entry.data.hideLocation && !import.meta.env.DEV;

const t = getTranslations();
---

<MainSite
	meta={{
		title: titleMultilingual ? `${title} (${titleMultilingual.value})` : title,
		description: entry.data.description,
		image: getSeoImageProps({
			...(entry.data.imageFeatured ? { id: entry.id } : { fallback: 'og-image-location' }),
			alt: title,
		}),
	}}
	hasHeroImage={!!entry.data.imageHero}
	hasReadingBar={true}
>
	<article {...getPagefindBodyProp(entry.data.hideSearch)}>
		{
			entry.data.imageHero ? (
				<ImageHero imageId={entry.data.imageHero} alt={title} class="sm:mb-small">
					<ContentHeader showFeatured={true}>
						<Fragment slot="header-title">{title}</Fragment>
						<Fragment slot="header-title-multilingual">
							<Multilingual content={titleMultilingual} />
						</Fragment>
						<Fragment slot="header-subtitle">
							<DividedItem dividerColor="hero">
								<CollectionLink collection="locations" showFeatured={true} />
							</DividedItem>
							{regionPrimary ? (
								<DividedItem dividerColor="hero">
									<RegionsBreadcrumbs
										entry={regionPrimary}
										showCurrentLink={true}
										showFeatured={true}
										dividerColor="hero"
									/>
								</DividedItem>
							) : undefined}
							<DividedItem dividerColor="hero">
								<ContentDate
									date={entry.data.dateCreated}
									dateUpdated={entry.data.dateUpdated}
									datePreset={DatePresetEnum.Medium}
								/>
							</DividedItem>
						</Fragment>
					</ContentHeader>
				</ImageHero>
			) : (
				<ContentHeader>
					<Fragment slot="header-title">{title}</Fragment>
					<Fragment slot="header-title-multilingual">
						<Multilingual content={titleMultilingual} />
					</Fragment>
					<Fragment slot="header-subtitle">
						<DividedItem>
							<CollectionLink collection="locations" />
						</DividedItem>
						{regionPrimary ? (
							<DividedItem>
								<RegionsBreadcrumbs entry={regionPrimary} showCurrentLink={true} />
							</DividedItem>
						) : undefined}
						<DividedItem>
							<ContentDate
								date={entry.data.dateCreated}
								dateUpdated={entry.data.dateUpdated}
								datePreset={DatePresetEnum.Medium}
							/>
						</DividedItem>
					</Fragment>
				</ContentHeader>
			)
		}
		{
			!hasContent && entry.data.imageFeatured ? (
				<ImageComponent imageId={entry.data.imageFeatured} alt={title} showMetadata={true} />
			) : undefined
		}
		<ContentDescription entry={entry} />
		<LocationsHeritage heritage={entry.data.heritage} />
		{hideLocation ? undefined : <ContentSectionLinks entry={entry} />}
		{hideLocation ? undefined : <ContentSectionDateVisited dateVisited={entry.data.dateVisited} />}
		<ContentSectionThemes themeIds={themeIds} />
		<ContentSectionBacklinks entry={entry} />
		<ContentSectionSeries entry={entry} />
		<ContentSectionPreviewGrid
			items={metadataItems}
			previewItemProps={{
				showDate: true,
				showRegion: true,
				showTitleMultilingual: true,
			}}
		/>
		{
			hideLocation ? undefined : (
				<ContentSectionMap mapData={mapData} mapId={`map-${entry.id}`}>
					{entry.data.address ? (
						<address class="px-small text-primary-400 mt-1 text-xs not-italic sm:px-0">
							{t('locations.address.label')}:{' '}
							{regionLangCode ? (
								<span>
									<FormatCjk langCode={regionLangCode}>{entry.data.address}</FormatCjk>
								</span>
							) : (
								<span>{entry.data.address}</span>
							)}
						</address>
					) : undefined}
				</ContentSectionMap>
			)
		}
		<LocationsNotices entry={entry} langCode={regionLangCode} />
		<LocationsNearbyList entry={entry} />
		<ContentSectionRelated entry={entry} />
	</article>
</MainSite>
