---
import type { CollectionEntry } from 'astro:content';

import { render } from 'astro:content';

import type { MapComponentData } from '#lib/map/map-types.ts';
import type { ContentMetadataItem } from '#types/metadata.ts';
import { getPagefindBodyProp } from '#lib/utils/pagefind.ts';
import MainSite from '#components/main/main-site.astro';
import ContentCollectionLink from '#components/content/content-collection-link.astro';
import ContentDate from '#components/content/content-date.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentImageEntry from '#components/content/content-image-entry.astro';
import ContentSectionBacklinks from '#components/content/content-section-backlinks.astro';
import ContentSectionDateVisited from '#components/content/content-section-date-visited.astro';
import ContentSectionLinks from '#components/content/content-section-links.astro';
import ContentSectionSeries from '#components/content/content-section-series.astro';
import ContentSectionThemes from '#components/content/content-section-themes.astro';
import ContentSection from '#components/content/content-section.astro';
import FormatCjk from '#components/format/format-cjk.astro';
import FormatMarkdown from '#components/format/format-markdown.astro';
import ImageHero from '#components/image-hero/image-hero.astro';
import LocationsHeritage from '#components/locations/locations-heritage.astro';
import LocationsNearbyList from '#components/locations/locations-nearby-list.astro';
import LocationsNotices from '#components/locations/locations-notices.astro';
import StatusBox from '#components/parts/alert-box.astro';
import DividedItem from '#components/parts/divided-item.astro';
import ProseBody from '#components/parts/prose-body.astro';
import ProseDescription from '#components/parts/prose-description.astro';
import PreviewGrid from '#components/preview/preview-grid.astro';
import RegionsBreadcrumbs from '#components/regions/regions-breadcrumbs.astro';
import { getLocationHasContent } from '#lib/collections/locations/utils.ts';
import { getTranslations } from '#lib/utils/i18n.ts';
import { getSeoImageProps } from '#lib/utils/seo.ts';
import ContentSectionMap from '#components/content/content-section-map.astro';

interface Props {
	entry: CollectionEntry<'locations'>;
	mapData: MapComponentData;
	metadataItems: Array<ContentMetadataItem>;
	regionPrimary: CollectionEntry<'regions'> | undefined;
}

const { entry, mapData, metadataItems, regionPrimary } = Astro.props;

const {
	data: { description, dateCreated, dateUpdated, imageFeatured, imageHero, heritage, address },
} = entry;

// This allows for titles to be overridden for sensitive or hidden sites
const title = entry.data.override?.title ?? entry.data.title;
const titleAlt = entry.data.override?.titleAlt ?? entry.data.titleAlt;

const { Content } = await render(entry);

const themeIds = entry.data.themes?.map(({ id }) => id);

const hasContent = getLocationHasContent(entry);

const t = getTranslations();
---

<MainSite
	meta={{
		title: titleAlt ? `${title} (${titleAlt})` : title,
		description,
		image: getSeoImageProps({
			...(imageFeatured ? { id: entry.id } : { fallback: 'og-image-location' }),
			alt: title,
		}),
	}}
	hasHeroImage={!!imageHero}
	hasReadingBar={true}
>
	<article {...getPagefindBodyProp(entry.data.hideSearch)}>
		{
			imageHero ? (
				<ImageHero imageId={imageHero} alt={title} class="sm:mb-small">
					<ContentHeader showFeatured={true}>
						<Fragment slot="header-title">{title}</Fragment>
						<Fragment slot="header-title-alt">{titleAlt}</Fragment>
						<Fragment slot="header-subtitle">
							<DividedItem dividerColor="hero">
								<ContentCollectionLink collection="locations" showFeatured={true} />
							</DividedItem>
							{regionPrimary ? (
								<DividedItem dividerColor="hero">
									<RegionsBreadcrumbs
										entry={regionPrimary}
										showCurrentLink={true}
										showFeatured={true}
										dividerColor="hero"
									/>
								</DividedItem>
							) : undefined}
							<DividedItem dividerColor="hero">
								<ContentDate date={dateCreated} dateUpdated={dateUpdated} datePreset="medium" />
							</DividedItem>
						</Fragment>
					</ContentHeader>
				</ImageHero>
			) : (
				<ContentHeader>
					<Fragment slot="header-title">{title}</Fragment>
					<Fragment slot="header-title-alt">{titleAlt}</Fragment>
					<Fragment slot="header-subtitle">
						<DividedItem>
							<ContentCollectionLink collection="locations" />
						</DividedItem>
						{regionPrimary ? (
							<DividedItem>
								<RegionsBreadcrumbs entry={regionPrimary} showCurrentLink={true} />
							</DividedItem>
						) : undefined}
						<DividedItem>
							<ContentDate date={dateCreated} dateUpdated={dateUpdated} datePreset="medium" />
						</DividedItem>
					</Fragment>
				</ContentHeader>
			)
		}
		{
			hasContent ? (
				<ProseBody class="pb-small" data-reading-frame>
					<Content />
				</ProseBody>
			) : (
				<>
					{imageFeatured ? (
						<ContentImageEntry imageId={imageFeatured} layout="medium" alt={title} />
					) : undefined}
					<ContentSection>
						<Fragment slot="section-description">
							<ProseDescription>
								<FormatMarkdown>{description}</FormatMarkdown>
							</ProseDescription>
						</Fragment>
					</ContentSection>
				</>
			)
		}
		{
			entry.data.entryQuality === 1 ? (
				<ContentSection data-pagefind-ignore>
					<StatusBox status="warning">
						<FormatMarkdown>{t('notice.quality')}</FormatMarkdown>
					</StatusBox>
				</ContentSection>
			) : undefined
		}
		<LocationsHeritage heritage={heritage} />
		{!!entry.data.hideLocation ? undefined : <ContentSectionLinks entry={entry} />}
		{
			!!entry.data.hideLocation ? undefined : (
				<ContentSectionDateVisited dateVisited={entry.data.dateVisited} />
			)
		}
		<ContentSectionThemes themeIds={themeIds} />
		<ContentSectionBacklinks entry={entry} />
		<ContentSectionSeries entry={entry} />
		<ContentSection data-pagefind-ignore>
			<Fragment slot="section-title">{t('content.section.content')}</Fragment>
			<PreviewGrid items={metadataItems} showDate={true} showRegion={true} />
		</ContentSection>
		<LocationsNotices entry={entry} />
		<ContentSectionMap mapData={mapData}>
			{
				address && !entry.data.hideLocation ? (
					<address class="px-small text-primary-400 mt-1 text-xs not-italic sm:px-0">
						{t('locations.address.label')}:{' '}
						<span>
							<FormatCjk>{address}</FormatCjk>
						</span>
					</address>
				) : undefined
			}
		</ContentSectionMap>
		<LocationsNearbyList entry={entry} />
	</article>
</MainSite>
