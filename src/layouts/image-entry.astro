---
import type { RemoteImageProps } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';

import { wrapCjk } from '@spectralcodex/unified-tools';
import { Image } from 'astro:assets';

import ContentDate from '#components/content/content-date.astro';
import ContentHeader from '#components/content/content-header.astro';
import ContentSectionBacklinks from '#components/content/content-section-backlinks.astro';
import ContentSection from '#components/content/content-section.astro';
import ImagePlaceholder from '#components/image/image-placeholder.astro';
import MainSite from '#components/main/main-site.astro';
import Container from '#components/parts/container.astro';
import DateDisplay from '#components/parts/date-display.astro';
import DividedItem from '#components/parts/divided-item.astro';
import TextGridItem from '#components/parts/text-grid-item.astro';
import { IMAGE_FORMAT, IMAGE_QUALITY } from '#constants.ts';
import { getTranslations } from '#lib/i18n/i18n-translations.ts';
import { getImageLayoutProps, ImageLayoutEnum } from '#lib/image/image-layout.ts';
import { sanitizeAltAttribute } from '#lib/utils/text.ts';

interface Props {
	entry: CollectionEntry<'images'>;
}

const { entry } = Astro.props;

// There is no way to know what sort of content we might be getting here
// May as well pass it through the CJK wrapper with the default settings (wrap any CJK characters)
const title = wrapCjk({
	input: entry.data.title,
	wrapCjkOptions: { langCode: 'cjk' },
});

const alt = sanitizeAltAttribute(entry.data.title);

const imageProps = {
	src: entry.data.src,
	alt,
	format: IMAGE_FORMAT,
	quality: IMAGE_QUALITY,
	...getImageLayoutProps({
		width: entry.data.width,
		height: entry.data.height,
		layout: ImageLayoutEnum.Default,
	}),
} satisfies RemoteImageProps;

const placeholder = entry.data.placeholder;

// TODO: offer direct image downloads at various sizes
// TODO: image licensing statement
const t = getTranslations();
---

<MainSite
	meta={{
		title: entry.data.title,
		description: `Image entry page for "${entry.id}".`,
		imageId: entry.id,
		imageAlt: alt,
		noIndex: true,
		noFollow: true,
	}}
>
	<ContentHeader>
		<Fragment slot="header-title" set:html={title} />
		<Fragment slot="header-subtitle">
			<DividedItem>
				<ContentDate date={entry.data.dateCreated} datePreset="long" />
			</DividedItem>
		</Fragment>
	</ContentHeader>
	<Container as="div">
		<ImagePlaceholder placeholder={placeholder}>
			<Image
				class:list={['rounded-xs object-cover object-center text-sm text-transparent']}
				loading="lazy"
				{...imageProps}
			/>
		</ImagePlaceholder>
	</Container>
	<ContentSection class="mt-small">
		<Fragment slot="section-title">{t('collection.images.metadata.title')}</Fragment>
		<div class="grid grid-cols-1 gap-2 md:grid-cols-3 md:gap-4">
			{
				entry.data.dateCreated ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.dateCreated.label')}
						</Fragment>
						<DateDisplay date={entry.data.dateCreated} datePreset="long" />
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.camera ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.cameraModel.label')}
						</Fragment>
						{entry.data.camera}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.lens ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.lensModel.label')}
						</Fragment>
						{entry.data.lens}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.aperture ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.aperture.label')}
						</Fragment>
						<em>&#402;</em>&#8202;/&#8202;{entry.data.aperture}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.shutterSpeed ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.shutterSpeed.label')}
						</Fragment>
						{`${String(entry.data.shutterSpeed)} sec`}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.focalLength ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.focalLength.label')}
						</Fragment>
						{entry.data.focalLength}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.iso ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">{t('collection.images.metadata.iso.label')}</Fragment>
						{entry.data.iso}
					</TextGridItem>
				) : undefined
			}
			{
				entry.data.exposureValue ? (
					<TextGridItem>
						<Fragment slot="grid-item-title">
							{t('collection.images.metadata.exposureValue.label')}
						</Fragment>
						{Number(entry.data.exposureValue).toFixed(1)}&nbsp;
						{t('collection.images.metadata.ev.label')}
					</TextGridItem>
				) : undefined
			}
			<TextGridItem>
				<Fragment slot="grid-item-title"
					>{t('collection.images.metadata.sourceDimensions.label')}</Fragment
				>
				<Fragment
					set:html={`${String(entry.data.width)}&#8202;&#215;&#8202;${String(entry.data.height)}`}
				/>
			</TextGridItem>
		</div>
	</ContentSection>
	<ContentSectionBacklinks entry={entry} />
</MainSite>
