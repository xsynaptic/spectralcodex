import { stripTags, transformMarkdown } from '@spectralcodex/unified-tools';
import * as R from 'remeda';
import urlJoin from 'url-join';

import {
	MDX_COMPONENTS_TO_STRIP,
	OPEN_GRAPH_BASE_PATH,
	OPEN_GRAPH_IMAGE_FALLBACK_COUNT,
	OPEN_GRAPH_IMAGE_FALLBACK_PREFIX,
	OPEN_GRAPH_IMAGE_FORMAT,
} from '#constants.ts';
import { parseContentDate } from '#lib/utils/date.ts';
import { stripMdxComponents, textClipper } from '#lib/utils/text.ts';

const { BASE_URL, PROD, SITE } = import.meta.env;

// Strip footnote references from text (*e.g.*, [^1], [^foo], [^123])
function stripFootnoteReferences(input: string) {
	return input.replaceAll(/\[\^[^\]]+\]/g, '');
}

// Simple text-only SEO description that accepts a variety of things you might throw at it
export function getSeoDescription(description: string | undefined) {
	return description
		? R.pipe(
				description,
				stripFootnoteReferences,
				(description) => stripMdxComponents(description, MDX_COMPONENTS_TO_STRIP),
				(description) => transformMarkdown({ input: description }),
				stripTags,
				(stripped) => textClipper(stripped, { wordCount: 100 }),
			)
		: undefined;
}

// Generate some common props for posts and post-like content
export function getSeoArticleProps({
	dateCreated,
	dateUpdated,
}: {
	dateCreated: Date;
	dateUpdated: Date | undefined;
}) {
	const publishedTime = parseContentDate(dateCreated)?.toISOString() ?? '';
	const modifiedTime = parseContentDate(dateUpdated)?.toISOString();

	return {
		ogType: 'article' as const,
		article: {
			publishedTime,
			...(modifiedTime ? { modifiedTime } : {}),
		},
	};
}

// ID: any generated Open Graph image
// Fallback: any base filename that appears in the public folder
export function getSeoImageProps({
	id,
	alt,
	fallback,
}: {
	id?: string;
	alt: string;
	fallback?: string;
}) {
	// Every valid ID should have a corresponding image generated by the Open Graph endpoint
	if (id) {
		return {
			url: urlJoin(
				PROD ? SITE : BASE_URL,
				OPEN_GRAPH_BASE_PATH,
				`${id}.${OPEN_GRAPH_IMAGE_FORMAT}`,
			),
			alt,
		};
	}

	// Explicit fallback images should already exist in the public folder
	if (fallback) {
		return {
			url: urlJoin(PROD ? SITE : BASE_URL, `${fallback}.${OPEN_GRAPH_IMAGE_FORMAT}`),
			alt,
		};
	}

	// Nothing
	return;
}

// These fallback images should already exist in the public folder
export function getSeoImageFallback() {
	return urlJoin(
		PROD ? SITE : BASE_URL,
		`${OPEN_GRAPH_IMAGE_FALLBACK_PREFIX}-${String(R.randomInteger(1, OPEN_GRAPH_IMAGE_FALLBACK_COUNT))}.${OPEN_GRAPH_IMAGE_FORMAT}`,
	);
}
